{"version":3,"sources":["components/DataTable/DataTable.module.css","components/DataTable/DataTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DataTable","data","className","classes","numberCol","map","row","name","symbol","industry","lastPrice","App","capFilter","id","useState","allData","setAllData","onlyQuality","setOnlyQuality","onlyLowVol","setOnlyLowVol","onlyMom","setOnlyMom","onlyAlphaLow","setOnlyAlphaLow","onlyDiv","setOnlyDiv","tableData","setTableData","selectedCap","getAllData","useCallback","a","query","reduce","dataFormatter","useEffect","console","log","qualityData","quality","slice","lowVolData","low_volatile","momData","momentum","alphaLowData","alpha_low_volatile","nifty200Data","nifty_200","dividend50Data","dividend_50","fetch","json","accumalator","value","filtered","filter","item","find","lv","capFiltered","top100","_","index","top200","meta","companyName","parseFloat","toFixed","formatted","class","type","checked","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d9dd35e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"numberCol\":\"DataTable_numberCol__1rq-P\"};","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classes from './DataTable.module.css'\n\nconst DataTable = ({\n    data\n}) => {\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Symbol</th>\n                    <th>Industry</th>\n                    <th className={classes.numberCol}>Last Price</th>\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    data.map(row => (\n                        <tr>\n                            <td>{row.name}</td>\n                            <td>{row.symbol}</td>\n                            <td>{row.industry}</td>\n                            <td className={classes.numberCol}>{row.lastPrice}</td>\n                        </tr>\n                    ))\n                }\n            </tbody>\n        </table>\n    );\n}\n\nDataTable.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.shape({\n        name: PropTypes.string,\n        symbol: PropTypes.string,\n        industry: PropTypes.string,\n        lastPrice: PropTypes.number\n    }))\n}\n\nexport default DataTable;","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport DataTable from './components/DataTable/DataTable'\n\nfunction App() {\n\n  const capFilter = [\n    {\n      name: 'All',\n      id: 'all'\n    },\n    {\n      name: 'Top 100',\n      id: 'top_100'\n    },\n    {\n      name: 'Bottom 100',\n      id: 'bottom_100'\n    }\n  ]\n\n  const [allData, setAllData] = useState()\n\n  const [onlyQuality, setOnlyQuality] = useState(false);\n  const [onlyLowVol, setOnlyLowVol] = useState(false);\n  const [onlyMom, setOnlyMom] = useState(false);\n  const [onlyAlphaLow, setOnlyAlphaLow] = useState(false);\n  const [onlyDiv, setOnlyDiv] = useState(false);\n\n  const [tableData, setTableData] = useState([]);\n  const [selectedCap, setSelectedCap] = useState(capFilter[0]);\n\n  const getAllData = useCallback(async () => {\n    let data = await query();\n    return data.reduce(dataFormatter, {});\n  }, [])\n\n  useEffect(() => {\n    (async () => {\n      const data = await getAllData();\n      // setQualityData(data.quality.data.slice(1))\n      // setLowVolData(data.low_volatile.data.slice(1))\n      console.log(data);\n      setAllData(data);\n    })();\n  }, [getAllData])\n\n  const qualityData = useCallback(() => {\n    return allData ? allData.quality.data.slice(1) : []\n  }, [allData])\n\n  const lowVolData = useCallback(() => {\n    return allData ? allData.low_volatile.data.slice(1) : []\n  }, [allData])\n\n  const momData = useCallback(() => {\n    return allData ? allData.momentum.data.slice(1) : []\n  }, [allData])\n\n  const alphaLowData = useCallback(() => {\n    return allData ? allData.alpha_low_volatile.data.slice(1) : []\n  }, [allData])\n\n  const nifty200Data = useCallback(() => {\n    return allData ? allData.nifty_200.data.slice(1) : []\n  }, [allData])\n\n  const dividend50Data = useCallback(() => {\n    return allData ? allData.dividend_50.data.slice(1) : []\n  }, [allData])\n\n  const query = async () => {\n    let data = await fetch('https://stocker.jijnasu.in/');\n    data = await data.json();\n    return data\n  }\n\n  const dataFormatter = (accumalator, value) => {\n    accumalator[value.name] = value.data;\n    return accumalator\n  }\n\n  const filtered = useCallback(() => {\n    let data = nifty200Data()\n\n    if (onlyQuality) {\n      data = data.filter(item => qualityData().find(lv => lv.symbol === item.symbol))\n    }\n\n    if (onlyLowVol) {\n      data = data.filter(item => lowVolData().find(lv => lv.symbol === item.symbol))\n    }\n\n    if (onlyMom) {\n      data = data.filter(item => momData().find(lv => lv.symbol === item.symbol))\n    }\n\n    if (onlyAlphaLow) {\n      data = data.filter(item => alphaLowData().find(lv => lv.symbol === item.symbol))\n    }\n\n    if (onlyDiv) {\n      data = data.filter(item => dividend50Data().find(lv => lv.symbol === item.symbol))\n    }\n\n    return data\n  }, [nifty200Data, onlyQuality, onlyLowVol, onlyMom, onlyAlphaLow, onlyDiv, qualityData, lowVolData, momData, alphaLowData, dividend50Data])\n\n  const capFiltered = useCallback((data) => {\n    switch (selectedCap.id) {\n      case 'top_100':\n        const top100 = nifty200Data().filter((_, index) => index < 101)\n        return data.filter(item => top100.find(lv => lv.symbol === item.symbol))\n      case 'bottom_100':\n        const top200 = nifty200Data().filter((_, index) => index > 100)\n        return data.filter(item => top200.find(lv => lv.symbol === item.symbol))\n      default:\n        return data;\n    }\n  }, [nifty200Data, selectedCap.id]);\n\n  const formatted = (data) => {\n    return data.map(item => ({\n      industry: item.meta.industry,\n      symbol: item.meta.symbol,\n      name: item.meta.companyName,\n      lastPrice: parseFloat(item.lastPrice).toFixed(2)\n    }));\n  }\n\n  const qualityChangeHandler = () => {\n    setOnlyQuality(!onlyQuality)\n  }\n\n  const volChangeHandler = () => {\n    setOnlyLowVol(!onlyLowVol)\n  }\n\n  const momChangeHandler = () => {\n    setOnlyMom(!onlyMom)\n  }\n\n  const alphaLowChangeHandler = () => {\n    setOnlyAlphaLow(!onlyAlphaLow)\n  }\n\n  const div50ChangeHandler = () => {\n    setOnlyDiv(!onlyDiv)\n  }\n\n  useEffect(() => {\n    let data = filtered();\n    setTableData(formatted(data));\n  }, [capFiltered, onlyLowVol, selectedCap, allData, filtered, onlyDiv])\n\n  const capChangeHandler = (e) => {\n    setSelectedCap(capFilter.find(item => item.id === e.target.value));\n  }\n\n  return (\n    <div className=\"App\">\n      <div class=\"container\">\n        <h1>Stockist</h1>\n        <p>Nifty 200</p>\n        <div className=\"filters\">\n          <label class=\"filterItem\">\n            <input type=\"checkbox\" checked={onlyQuality} onChange={qualityChangeHandler} />\n            NIFTY200 QUALITY 30\n      </label>\n          <label class=\"filterItem\">\n            <input type=\"checkbox\" checked={onlyLowVol} onChange={volChangeHandler} />\n            NIFTY100 LOW VOLATILITY 30\n      </label>\n          <label class=\"filterItem\">\n            <input type=\"checkbox\" checked={onlyMom} onChange={momChangeHandler} />\n            NIFTY200 MOMENTUM 30\n      </label>\n      <label class=\"filterItem\">\n            <input type=\"checkbox\" checked={onlyAlphaLow} onChange={alphaLowChangeHandler} />\n            NIFTY ALPHA LOW-VOLATILITY 30\n      </label>\n      <label class=\"filterItem\">\n            <input type=\"checkbox\" checked={onlyDiv} onChange={div50ChangeHandler} />\n            NIFTY DIVIDEND OPPORTUNITIES 50\n      </label>\n          {/* <select class=\"filterItem\" value={selectedCap.id} onChange={capChangeHandler} >\n            {\n              capFilter.map(item => (\n                <option value={item.id}>{item.name}</option>\n              ))\n            }\n          </select> */}\n        </div>\n        <div className=\"data\">\n          <DataTable data={tableData} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}