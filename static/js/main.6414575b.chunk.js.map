{"version":3,"sources":["components/DataTable/DataTable.module.css","components/DataTable/DataTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DataTable","data","className","classes","numberCol","map","row","name","symbol","industry","lastPrice","App","capFilter","id","useState","allData","setAllData","onlyLowVol","setOnlyLowVol","onlyMom","setOnlyMom","tableData","setTableData","selectedCap","getAllData","useCallback","a","query","reduce","dataFormatter","useEffect","console","log","qualityData","quality","slice","lowVolData","low_volatile","momData","momentum","nifty200Data","nifty_200","fetch","json","accumalator","value","filtered","filter","item","find","lv","capFiltered","top100","_","index","top200","meta","companyName","parseFloat","toFixed","formatted","class","type","checked","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6414575b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"numberCol\":\"DataTable_numberCol__1rq-P\"};","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classes from './DataTable.module.css'\n\nconst DataTable = ({\n    data\n}) => {\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Symbol</th>\n                    <th>Industry</th>\n                    <th className={classes.numberCol}>Last Price</th>\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    data.map(row => (\n                        <tr>\n                            <td>{row.name}</td>\n                            <td>{row.symbol}</td>\n                            <td>{row.industry}</td>\n                            <td className={classes.numberCol}>{row.lastPrice}</td>\n                        </tr>\n                    ))\n                }\n            </tbody>\n        </table>\n    );\n}\n\nDataTable.propTypes = {\n    data: PropTypes.arrayOf(PropTypes.shape({\n        name: PropTypes.string,\n        symbol: PropTypes.string,\n        industry: PropTypes.string,\n        lastPrice: PropTypes.number\n    }))\n}\n\nexport default DataTable;","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport DataTable from './components/DataTable/DataTable'\n\nfunction App() {\n\n  const capFilter = [\n    {\n      name: 'All',\n      id: 'all'\n    },\n    {\n      name: 'Top 100',\n      id: 'top_100'\n    },\n    {\n      name: 'Bottom 100',\n      id: 'bottom_100'\n    }\n  ]\n\n  const [allData, setAllData] = useState()\n  const [onlyLowVol, setOnlyLowVol] = useState(false);\n  const [onlyMom, setOnlyMom] = useState(false);\n  const [tableData, setTableData] = useState([]);\n  const [selectedCap, setSelectedCap] = useState(capFilter[0]);\n\n  const getAllData = useCallback(async () => {\n    let data = await query();\n    return data.reduce(dataFormatter, {});\n  }, [])\n\n  useEffect(() => {\n    (async () => {\n      const data = await getAllData();\n      // setQualityData(data.quality.data.slice(1))\n      // setLowVolData(data.low_volatile.data.slice(1))\n      console.log(data);\n      setAllData(data);\n    })();\n  }, [getAllData])\n\n  const qualityData = useCallback(() => {\n    return allData ? allData.quality.data.slice(1) : []\n  }, [allData])\n\n  const lowVolData = useCallback(() => {\n    return allData ? allData.low_volatile.data.slice(1) : []\n  }, [allData])\n\n  const momData = useCallback(() => {\n    return allData ? allData.momentum.data.slice(1) : []\n  }, [allData])\n\n  const nifty200Data = useCallback(() => {\n    return allData ? allData.nifty_200.data.slice(1) : []\n  }, [allData])\n\n  const query = async () => {\n    let data = await fetch('https://stocker.jijnasu.in/');\n    data = await data.json();\n    return data\n  }\n\n  const dataFormatter = (accumalator, value) => {\n    accumalator[value.name] = value.data;\n    return accumalator\n  }\n\n\n\n  const filtered = useCallback(() => {\n    let data = qualityData()\n    if (onlyLowVol) {\n      data =  data.filter(item => lowVolData().find(lv => lv.symbol === item.symbol))\n    }\n\n    if (onlyMom) {\n      data =  data.filter(item => momData().find(lv => lv.symbol === item.symbol))\n    }\n    return data\n  }, [lowVolData, momData, onlyLowVol, onlyMom, qualityData])\n\n  const capFiltered = useCallback((data) => {\n    switch (selectedCap.id) {\n      case 'top_100':\n        const top100 = nifty200Data().filter((_, index) => index < 101)\n        return data.filter(item => top100.find(lv => lv.symbol === item.symbol))\n      case 'bottom_100':\n        const top200 = nifty200Data().filter((_, index) => index > 100)\n        return data.filter(item => top200.find(lv => lv.symbol === item.symbol))\n      default:\n        return data;\n    }\n  }, [nifty200Data, selectedCap.id]);\n\n  const formatted = (data) => {\n    return data.map(item => ({\n      industry: item.meta.industry,\n      symbol: item.meta.symbol,\n      name: item.meta.companyName,\n      lastPrice: parseFloat(item.lastPrice).toFixed(2)\n    }));\n  }\n\n  const volChangeHandler = () => {\n    setOnlyLowVol(!onlyLowVol)\n  }\n\n  const momChangeHandler = () => {\n    setOnlyMom(!onlyMom)\n  }\n\n  useEffect(() => {\n    let data = filtered();\n    setTableData(formatted(data));\n  }, [capFiltered, onlyLowVol, selectedCap, allData, filtered])\n\n  const capChangeHandler = (e) => {\n    setSelectedCap(capFilter.find(item => item.id === e.target.value));\n  }\n\n  return (\n    <div className=\"App\">\n      <div class=\"container\">\n        <h1>Stockist</h1>\n        <p>Nifty 200 Quality 30</p>\n        <div className=\"filters\">\n          <label class=\"filterItem\">\n            <input type=\"checkbox\" checked={onlyLowVol} onChange={volChangeHandler} />\n        Low Volatile\n      </label>\n          <label class=\"filterItem\">\n            <input type=\"checkbox\" checked={onlyMom} onChange={momChangeHandler} />\n        Momentum\n      </label>\n          {/* <select class=\"filterItem\" value={selectedCap.id} onChange={capChangeHandler} >\n            {\n              capFilter.map(item => (\n                <option value={item.id}>{item.name}</option>\n              ))\n            }\n          </select> */}\n        </div>\n        <div className=\"data\">\n          <DataTable data={tableData} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}